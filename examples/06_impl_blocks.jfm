// Implementation blocks for structs
struct Vector2 {
    x: f32,
    y: f32
}

impl Vector2 {
    // Constructor
    fn new(x: f32, y: f32) -> Vector2 {
        return Vector2 { x: x, y: y };
    }
    
    // Method with self parameter
    fn magnitude(self: Vector2) -> f32 {
        return sqrt(self.x * self.x + self.y * self.y);
    }
    
    // Method that returns a new instance
    fn add(self: Vector2, other: Vector2) -> Vector2 {
        return Vector2 {
            x: self.x + other.x,
            y: self.y + other.y
        };
    }
    
    // Method that modifies self (requires mutable reference in real impl)
    fn scale(self: Vector2, factor: f32) -> Vector2 {
        return Vector2 {
            x: self.x * factor,
            y: self.y * factor
        };
    }
    
    fn dot(self: Vector2, other: Vector2) -> f32 {
        return self.x * other.x + self.y * other.y;
    }
}

fn main() -> i32 {
    // Using constructor
    let v1: Vector2 = Vector2::new(3.0, 4.0);
    let v2: Vector2 = Vector2::new(1.0, 2.0);
    
    // Calling methods
    let mag: f32 = v1.magnitude();
    let v3: Vector2 = v1.add(v2);
    let v4: Vector2 = v3.scale(2.0);
    let dot_product: f32 = v1.dot(v2);
    
    return 0;
}